// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: os_remote.proto

#ifndef PROTOBUF_INCLUDED_os_5fremote_2eproto
#define PROTOBUF_INCLUDED_os_5fremote_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_os_5fremote_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_os_5fremote_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_os_5fremote_2eproto();
namespace os_remote {
class ArgReply;
class ArgReplyDefaultTypeInternal;
extern ArgReplyDefaultTypeInternal _ArgReply_default_instance_;
class ArgRequest;
class ArgRequestDefaultTypeInternal;
extern ArgRequestDefaultTypeInternal _ArgRequest_default_instance_;
}  // namespace os_remote
namespace google {
namespace protobuf {
template<> ::os_remote::ArgReply* Arena::CreateMaybeMessage<::os_remote::ArgReply>(Arena*);
template<> ::os_remote::ArgRequest* Arena::CreateMaybeMessage<::os_remote::ArgRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace os_remote {

// ===================================================================

class ArgRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:os_remote.ArgRequest) */ {
 public:
  ArgRequest();
  virtual ~ArgRequest();

  ArgRequest(const ArgRequest& from);

  inline ArgRequest& operator=(const ArgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArgRequest(ArgRequest&& from) noexcept
    : ArgRequest() {
    *this = ::std::move(from);
  }

  inline ArgRequest& operator=(ArgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ArgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArgRequest* internal_default_instance() {
    return reinterpret_cast<const ArgRequest*>(
               &_ArgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ArgRequest* other);
  friend void swap(ArgRequest& a, ArgRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArgRequest* New() const final {
    return CreateMaybeMessage<ArgRequest>(nullptr);
  }

  ArgRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArgRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ArgRequest& from);
  void MergeFrom(const ArgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes inarg = 1;
  void clear_inarg();
  static const int kInargFieldNumber = 1;
  const ::std::string& inarg() const;
  void set_inarg(const ::std::string& value);
  #if LANG_CXX11
  void set_inarg(::std::string&& value);
  #endif
  void set_inarg(const char* value);
  void set_inarg(const void* value, size_t size);
  ::std::string* mutable_inarg();
  ::std::string* release_inarg();
  void set_allocated_inarg(::std::string* inarg);

  // uint32 outlen = 2;
  void clear_outlen();
  static const int kOutlenFieldNumber = 2;
  ::google::protobuf::uint32 outlen() const;
  void set_outlen(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:os_remote.ArgRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inarg_;
  ::google::protobuf::uint32 outlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_os_5fremote_2eproto;
};
// -------------------------------------------------------------------

class ArgReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:os_remote.ArgReply) */ {
 public:
  ArgReply();
  virtual ~ArgReply();

  ArgReply(const ArgReply& from);

  inline ArgReply& operator=(const ArgReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArgReply(ArgReply&& from) noexcept
    : ArgReply() {
    *this = ::std::move(from);
  }

  inline ArgReply& operator=(ArgReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ArgReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArgReply* internal_default_instance() {
    return reinterpret_cast<const ArgReply*>(
               &_ArgReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ArgReply* other);
  friend void swap(ArgReply& a, ArgReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArgReply* New() const final {
    return CreateMaybeMessage<ArgReply>(nullptr);
  }

  ArgReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArgReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ArgReply& from);
  void MergeFrom(const ArgReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArgReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes outarg = 1;
  void clear_outarg();
  static const int kOutargFieldNumber = 1;
  const ::std::string& outarg() const;
  void set_outarg(const ::std::string& value);
  #if LANG_CXX11
  void set_outarg(::std::string&& value);
  #endif
  void set_outarg(const char* value);
  void set_outarg(const void* value, size_t size);
  ::std::string* mutable_outarg();
  ::std::string* release_outarg();
  void set_allocated_outarg(::std::string* outarg);

  // @@protoc_insertion_point(class_scope:os_remote.ArgReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr outarg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_os_5fremote_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArgRequest

// bytes inarg = 1;
inline void ArgRequest::clear_inarg() {
  inarg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArgRequest::inarg() const {
  // @@protoc_insertion_point(field_get:os_remote.ArgRequest.inarg)
  return inarg_.GetNoArena();
}
inline void ArgRequest::set_inarg(const ::std::string& value) {
  
  inarg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:os_remote.ArgRequest.inarg)
}
#if LANG_CXX11
inline void ArgRequest::set_inarg(::std::string&& value) {
  
  inarg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:os_remote.ArgRequest.inarg)
}
#endif
inline void ArgRequest::set_inarg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inarg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:os_remote.ArgRequest.inarg)
}
inline void ArgRequest::set_inarg(const void* value, size_t size) {
  
  inarg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:os_remote.ArgRequest.inarg)
}
inline ::std::string* ArgRequest::mutable_inarg() {
  
  // @@protoc_insertion_point(field_mutable:os_remote.ArgRequest.inarg)
  return inarg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArgRequest::release_inarg() {
  // @@protoc_insertion_point(field_release:os_remote.ArgRequest.inarg)
  
  return inarg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArgRequest::set_allocated_inarg(::std::string* inarg) {
  if (inarg != nullptr) {
    
  } else {
    
  }
  inarg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inarg);
  // @@protoc_insertion_point(field_set_allocated:os_remote.ArgRequest.inarg)
}

// uint32 outlen = 2;
inline void ArgRequest::clear_outlen() {
  outlen_ = 0u;
}
inline ::google::protobuf::uint32 ArgRequest::outlen() const {
  // @@protoc_insertion_point(field_get:os_remote.ArgRequest.outlen)
  return outlen_;
}
inline void ArgRequest::set_outlen(::google::protobuf::uint32 value) {
  
  outlen_ = value;
  // @@protoc_insertion_point(field_set:os_remote.ArgRequest.outlen)
}

// -------------------------------------------------------------------

// ArgReply

// bytes outarg = 1;
inline void ArgReply::clear_outarg() {
  outarg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArgReply::outarg() const {
  // @@protoc_insertion_point(field_get:os_remote.ArgReply.outarg)
  return outarg_.GetNoArena();
}
inline void ArgReply::set_outarg(const ::std::string& value) {
  
  outarg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:os_remote.ArgReply.outarg)
}
#if LANG_CXX11
inline void ArgReply::set_outarg(::std::string&& value) {
  
  outarg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:os_remote.ArgReply.outarg)
}
#endif
inline void ArgReply::set_outarg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outarg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:os_remote.ArgReply.outarg)
}
inline void ArgReply::set_outarg(const void* value, size_t size) {
  
  outarg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:os_remote.ArgReply.outarg)
}
inline ::std::string* ArgReply::mutable_outarg() {
  
  // @@protoc_insertion_point(field_mutable:os_remote.ArgReply.outarg)
  return outarg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArgReply::release_outarg() {
  // @@protoc_insertion_point(field_release:os_remote.ArgReply.outarg)
  
  return outarg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArgReply::set_allocated_outarg(::std::string* outarg) {
  if (outarg != nullptr) {
    
  } else {
    
  }
  outarg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), outarg);
  // @@protoc_insertion_point(field_set_allocated:os_remote.ArgReply.outarg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace os_remote

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_os_5fremote_2eproto
