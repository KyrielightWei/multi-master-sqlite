// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_INCLUDED_test_2eproto
#define PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_test_2eproto();
namespace test {
class OpenReply;
class OpenReplyDefaultTypeInternal;
extern OpenReplyDefaultTypeInternal _OpenReply_default_instance_;
class OpenSend;
class OpenSendDefaultTypeInternal;
extern OpenSendDefaultTypeInternal _OpenSend_default_instance_;
}  // namespace test
namespace google {
namespace protobuf {
template<> ::test::OpenReply* Arena::CreateMaybeMessage<::test::OpenReply>(Arena*);
template<> ::test::OpenSend* Arena::CreateMaybeMessage<::test::OpenSend>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace test {

// ===================================================================

class OpenSend final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.OpenSend) */ {
 public:
  OpenSend();
  virtual ~OpenSend();

  OpenSend(const OpenSend& from);

  inline OpenSend& operator=(const OpenSend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenSend(OpenSend&& from) noexcept
    : OpenSend() {
    *this = ::std::move(from);
  }

  inline OpenSend& operator=(OpenSend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OpenSend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenSend* internal_default_instance() {
    return reinterpret_cast<const OpenSend*>(
               &_OpenSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OpenSend* other);
  friend void swap(OpenSend& a, OpenSend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenSend* New() const final {
    return CreateMaybeMessage<OpenSend>(nullptr);
  }

  OpenSend* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenSend>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenSend& from);
  void MergeFrom(const OpenSend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vfs_name = 1;
  void clear_vfs_name();
  static const int kVfsNameFieldNumber = 1;
  const ::std::string& vfs_name() const;
  void set_vfs_name(const ::std::string& value);
  #if LANG_CXX11
  void set_vfs_name(::std::string&& value);
  #endif
  void set_vfs_name(const char* value);
  void set_vfs_name(const char* value, size_t size);
  ::std::string* mutable_vfs_name();
  ::std::string* release_vfs_name();
  void set_allocated_vfs_name(::std::string* vfs_name);

  // string f_path = 2;
  void clear_f_path();
  static const int kFPathFieldNumber = 2;
  const ::std::string& f_path() const;
  void set_f_path(const ::std::string& value);
  #if LANG_CXX11
  void set_f_path(::std::string&& value);
  #endif
  void set_f_path(const char* value);
  void set_f_path(const char* value, size_t size);
  ::std::string* mutable_f_path();
  ::std::string* release_f_path();
  void set_allocated_f_path(::std::string* f_path);

  // bytes file_infor = 3;
  void clear_file_infor();
  static const int kFileInforFieldNumber = 3;
  const ::std::string& file_infor() const;
  void set_file_infor(const ::std::string& value);
  #if LANG_CXX11
  void set_file_infor(::std::string&& value);
  #endif
  void set_file_infor(const char* value);
  void set_file_infor(const void* value, size_t size);
  ::std::string* mutable_file_infor();
  ::std::string* release_file_infor();
  void set_allocated_file_infor(::std::string* file_infor);

  // int32 in_flags = 4;
  void clear_in_flags();
  static const int kInFlagsFieldNumber = 4;
  ::google::protobuf::int32 in_flags() const;
  void set_in_flags(::google::protobuf::int32 value);

  // int32 out_flags = 5;
  void clear_out_flags();
  static const int kOutFlagsFieldNumber = 5;
  ::google::protobuf::int32 out_flags() const;
  void set_out_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test.OpenSend)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vfs_name_;
  ::google::protobuf::internal::ArenaStringPtr f_path_;
  ::google::protobuf::internal::ArenaStringPtr file_infor_;
  ::google::protobuf::int32 in_flags_;
  ::google::protobuf::int32 out_flags_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class OpenReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.OpenReply) */ {
 public:
  OpenReply();
  virtual ~OpenReply();

  OpenReply(const OpenReply& from);

  inline OpenReply& operator=(const OpenReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenReply(OpenReply&& from) noexcept
    : OpenReply() {
    *this = ::std::move(from);
  }

  inline OpenReply& operator=(OpenReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OpenReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenReply* internal_default_instance() {
    return reinterpret_cast<const OpenReply*>(
               &_OpenReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OpenReply* other);
  friend void swap(OpenReply& a, OpenReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenReply* New() const final {
    return CreateMaybeMessage<OpenReply>(nullptr);
  }

  OpenReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenReply& from);
  void MergeFrom(const OpenReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes file_infor_reply = 7;
  void clear_file_infor_reply();
  static const int kFileInforReplyFieldNumber = 7;
  const ::std::string& file_infor_reply() const;
  void set_file_infor_reply(const ::std::string& value);
  #if LANG_CXX11
  void set_file_infor_reply(::std::string&& value);
  #endif
  void set_file_infor_reply(const char* value);
  void set_file_infor_reply(const void* value, size_t size);
  ::std::string* mutable_file_infor_reply();
  ::std::string* release_file_infor_reply();
  void set_allocated_file_infor_reply(::std::string* file_infor_reply);

  // int32 out_flags = 5;
  void clear_out_flags();
  static const int kOutFlagsFieldNumber = 5;
  ::google::protobuf::int32 out_flags() const;
  void set_out_flags(::google::protobuf::int32 value);

  // int32 rc = 6;
  void clear_rc();
  static const int kRcFieldNumber = 6;
  ::google::protobuf::int32 rc() const;
  void set_rc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test.OpenReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_infor_reply_;
  ::google::protobuf::int32 out_flags_;
  ::google::protobuf::int32 rc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpenSend

// string vfs_name = 1;
inline void OpenSend::clear_vfs_name() {
  vfs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenSend::vfs_name() const {
  // @@protoc_insertion_point(field_get:test.OpenSend.vfs_name)
  return vfs_name_.GetNoArena();
}
inline void OpenSend::set_vfs_name(const ::std::string& value) {
  
  vfs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.OpenSend.vfs_name)
}
#if LANG_CXX11
inline void OpenSend::set_vfs_name(::std::string&& value) {
  
  vfs_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.OpenSend.vfs_name)
}
#endif
inline void OpenSend::set_vfs_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vfs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.OpenSend.vfs_name)
}
inline void OpenSend::set_vfs_name(const char* value, size_t size) {
  
  vfs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.OpenSend.vfs_name)
}
inline ::std::string* OpenSend::mutable_vfs_name() {
  
  // @@protoc_insertion_point(field_mutable:test.OpenSend.vfs_name)
  return vfs_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenSend::release_vfs_name() {
  // @@protoc_insertion_point(field_release:test.OpenSend.vfs_name)
  
  return vfs_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenSend::set_allocated_vfs_name(::std::string* vfs_name) {
  if (vfs_name != nullptr) {
    
  } else {
    
  }
  vfs_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vfs_name);
  // @@protoc_insertion_point(field_set_allocated:test.OpenSend.vfs_name)
}

// string f_path = 2;
inline void OpenSend::clear_f_path() {
  f_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenSend::f_path() const {
  // @@protoc_insertion_point(field_get:test.OpenSend.f_path)
  return f_path_.GetNoArena();
}
inline void OpenSend::set_f_path(const ::std::string& value) {
  
  f_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.OpenSend.f_path)
}
#if LANG_CXX11
inline void OpenSend::set_f_path(::std::string&& value) {
  
  f_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.OpenSend.f_path)
}
#endif
inline void OpenSend::set_f_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  f_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.OpenSend.f_path)
}
inline void OpenSend::set_f_path(const char* value, size_t size) {
  
  f_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.OpenSend.f_path)
}
inline ::std::string* OpenSend::mutable_f_path() {
  
  // @@protoc_insertion_point(field_mutable:test.OpenSend.f_path)
  return f_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenSend::release_f_path() {
  // @@protoc_insertion_point(field_release:test.OpenSend.f_path)
  
  return f_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenSend::set_allocated_f_path(::std::string* f_path) {
  if (f_path != nullptr) {
    
  } else {
    
  }
  f_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), f_path);
  // @@protoc_insertion_point(field_set_allocated:test.OpenSend.f_path)
}

// bytes file_infor = 3;
inline void OpenSend::clear_file_infor() {
  file_infor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenSend::file_infor() const {
  // @@protoc_insertion_point(field_get:test.OpenSend.file_infor)
  return file_infor_.GetNoArena();
}
inline void OpenSend::set_file_infor(const ::std::string& value) {
  
  file_infor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.OpenSend.file_infor)
}
#if LANG_CXX11
inline void OpenSend::set_file_infor(::std::string&& value) {
  
  file_infor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.OpenSend.file_infor)
}
#endif
inline void OpenSend::set_file_infor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_infor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.OpenSend.file_infor)
}
inline void OpenSend::set_file_infor(const void* value, size_t size) {
  
  file_infor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.OpenSend.file_infor)
}
inline ::std::string* OpenSend::mutable_file_infor() {
  
  // @@protoc_insertion_point(field_mutable:test.OpenSend.file_infor)
  return file_infor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenSend::release_file_infor() {
  // @@protoc_insertion_point(field_release:test.OpenSend.file_infor)
  
  return file_infor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenSend::set_allocated_file_infor(::std::string* file_infor) {
  if (file_infor != nullptr) {
    
  } else {
    
  }
  file_infor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_infor);
  // @@protoc_insertion_point(field_set_allocated:test.OpenSend.file_infor)
}

// int32 in_flags = 4;
inline void OpenSend::clear_in_flags() {
  in_flags_ = 0;
}
inline ::google::protobuf::int32 OpenSend::in_flags() const {
  // @@protoc_insertion_point(field_get:test.OpenSend.in_flags)
  return in_flags_;
}
inline void OpenSend::set_in_flags(::google::protobuf::int32 value) {
  
  in_flags_ = value;
  // @@protoc_insertion_point(field_set:test.OpenSend.in_flags)
}

// int32 out_flags = 5;
inline void OpenSend::clear_out_flags() {
  out_flags_ = 0;
}
inline ::google::protobuf::int32 OpenSend::out_flags() const {
  // @@protoc_insertion_point(field_get:test.OpenSend.out_flags)
  return out_flags_;
}
inline void OpenSend::set_out_flags(::google::protobuf::int32 value) {
  
  out_flags_ = value;
  // @@protoc_insertion_point(field_set:test.OpenSend.out_flags)
}

// -------------------------------------------------------------------

// OpenReply

// int32 rc = 6;
inline void OpenReply::clear_rc() {
  rc_ = 0;
}
inline ::google::protobuf::int32 OpenReply::rc() const {
  // @@protoc_insertion_point(field_get:test.OpenReply.rc)
  return rc_;
}
inline void OpenReply::set_rc(::google::protobuf::int32 value) {
  
  rc_ = value;
  // @@protoc_insertion_point(field_set:test.OpenReply.rc)
}

// bytes file_infor_reply = 7;
inline void OpenReply::clear_file_infor_reply() {
  file_infor_reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenReply::file_infor_reply() const {
  // @@protoc_insertion_point(field_get:test.OpenReply.file_infor_reply)
  return file_infor_reply_.GetNoArena();
}
inline void OpenReply::set_file_infor_reply(const ::std::string& value) {
  
  file_infor_reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.OpenReply.file_infor_reply)
}
#if LANG_CXX11
inline void OpenReply::set_file_infor_reply(::std::string&& value) {
  
  file_infor_reply_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.OpenReply.file_infor_reply)
}
#endif
inline void OpenReply::set_file_infor_reply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_infor_reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.OpenReply.file_infor_reply)
}
inline void OpenReply::set_file_infor_reply(const void* value, size_t size) {
  
  file_infor_reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.OpenReply.file_infor_reply)
}
inline ::std::string* OpenReply::mutable_file_infor_reply() {
  
  // @@protoc_insertion_point(field_mutable:test.OpenReply.file_infor_reply)
  return file_infor_reply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenReply::release_file_infor_reply() {
  // @@protoc_insertion_point(field_release:test.OpenReply.file_infor_reply)
  
  return file_infor_reply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenReply::set_allocated_file_infor_reply(::std::string* file_infor_reply) {
  if (file_infor_reply != nullptr) {
    
  } else {
    
  }
  file_infor_reply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_infor_reply);
  // @@protoc_insertion_point(field_set_allocated:test.OpenReply.file_infor_reply)
}

// int32 out_flags = 5;
inline void OpenReply::clear_out_flags() {
  out_flags_ = 0;
}
inline ::google::protobuf::int32 OpenReply::out_flags() const {
  // @@protoc_insertion_point(field_get:test.OpenReply.out_flags)
  return out_flags_;
}
inline void OpenReply::set_out_flags(::google::protobuf::int32 value) {
  
  out_flags_ = value;
  // @@protoc_insertion_point(field_set:test.OpenReply.out_flags)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_test_2eproto
