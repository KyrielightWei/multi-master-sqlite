// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace test {
class OpenSendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenSend> _instance;
} _OpenSend_default_instance_;
class OpenReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenReply> _instance;
} _OpenReply_default_instance_;
}  // namespace test
static void InitDefaultsOpenSend_test_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::test::_OpenSend_default_instance_;
    new (ptr) ::test::OpenSend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::test::OpenSend::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenSend_test_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenSend_test_2eproto}, {}};

static void InitDefaultsOpenReply_test_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::test::_OpenReply_default_instance_;
    new (ptr) ::test::OpenReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::test::OpenReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenReply_test_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenReply_test_2eproto}, {}};

void InitDefaults_test_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_OpenSend_test_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenReply_test_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_test_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_test_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_test_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_test_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::OpenSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::OpenSend, vfs_name_),
  PROTOBUF_FIELD_OFFSET(::test::OpenSend, f_path_),
  PROTOBUF_FIELD_OFFSET(::test::OpenSend, file_infor_),
  PROTOBUF_FIELD_OFFSET(::test::OpenSend, in_flags_),
  PROTOBUF_FIELD_OFFSET(::test::OpenSend, out_flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::OpenReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::OpenReply, rc_),
  PROTOBUF_FIELD_OFFSET(::test::OpenReply, file_infor_reply_),
  PROTOBUF_FIELD_OFFSET(::test::OpenReply, out_flags_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::test::OpenSend)},
  { 10, -1, sizeof(::test::OpenReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::test::_OpenSend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::test::_OpenReply_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_test_2eproto = {
  {}, AddDescriptors_test_2eproto, "test.proto", schemas,
  file_default_instances, TableStruct_test_2eproto::offsets,
  file_level_metadata_test_2eproto, 2, file_level_enum_descriptors_test_2eproto, file_level_service_descriptors_test_2eproto,
};

const char descriptor_table_protodef_test_2eproto[] =
  "\n\ntest.proto\022\004test\"e\n\010OpenSend\022\020\n\010vfs_na"
  "me\030\001 \001(\t\022\016\n\006f_path\030\002 \001(\t\022\022\n\nfile_infor\030\003"
  " \001(\014\022\020\n\010in_flags\030\004 \001(\005\022\021\n\tout_flags\030\005 \001("
  "\005\"D\n\tOpenReply\022\n\n\002rc\030\006 \001(\005\022\030\n\020file_infor"
  "_reply\030\007 \001(\014\022\021\n\tout_flags\030\005 \001(\00525\n\004Test\022"
  "-\n\010TestOpen\022\016.test.OpenSend\032\017.test.OpenR"
  "eply\"\000B6\n\033io.grpc.examples.helloworldB\017H"
  "elloWorldProtoP\001\242\002\003HLWb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_test_2eproto = {
  false, InitDefaults_test_2eproto, 
  descriptor_table_protodef_test_2eproto,
  "test.proto", &assign_descriptors_table_test_2eproto, 310,
};

void AddDescriptors_test_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_test_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_test_2eproto = []() { AddDescriptors_test_2eproto(); return true; }();
namespace test {

// ===================================================================

void OpenSend::InitAsDefaultInstance() {
}
class OpenSend::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSend::kVfsNameFieldNumber;
const int OpenSend::kFPathFieldNumber;
const int OpenSend::kFileInforFieldNumber;
const int OpenSend::kInFlagsFieldNumber;
const int OpenSend::kOutFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSend::OpenSend()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.OpenSend)
}
OpenSend::OpenSend(const OpenSend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vfs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vfs_name().size() > 0) {
    vfs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vfs_name_);
  }
  f_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.f_path().size() > 0) {
    f_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.f_path_);
  }
  file_infor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_infor().size() > 0) {
    file_infor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_infor_);
  }
  ::memcpy(&in_flags_, &from.in_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_flags_) -
    reinterpret_cast<char*>(&in_flags_)) + sizeof(out_flags_));
  // @@protoc_insertion_point(copy_constructor:test.OpenSend)
}

void OpenSend::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OpenSend_test_2eproto.base);
  vfs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_infor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&in_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_flags_) -
      reinterpret_cast<char*>(&in_flags_)) + sizeof(out_flags_));
}

OpenSend::~OpenSend() {
  // @@protoc_insertion_point(destructor:test.OpenSend)
  SharedDtor();
}

void OpenSend::SharedDtor() {
  vfs_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_infor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpenSend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenSend& OpenSend::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OpenSend_test_2eproto.base);
  return *internal_default_instance();
}


void OpenSend::Clear() {
// @@protoc_insertion_point(message_clear_start:test.OpenSend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vfs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_infor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&in_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_flags_) -
      reinterpret_cast<char*>(&in_flags_)) + sizeof(out_flags_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OpenSend::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OpenSend*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string vfs_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("test.OpenSend.vfs_name");
        object = msg->mutable_vfs_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string f_path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("test.OpenSend.f_path");
        object = msg->mutable_f_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes file_infor = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_file_infor();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 in_flags = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_in_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 out_flags = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_out_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OpenSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.OpenSend)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string vfs_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vfs_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vfs_name().data(), static_cast<int>(this->vfs_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "test.OpenSend.vfs_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string f_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->f_path().data(), static_cast<int>(this->f_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "test.OpenSend.f_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes file_infor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_infor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 in_flags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 out_flags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.OpenSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.OpenSend)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OpenSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.OpenSend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vfs_name = 1;
  if (this->vfs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vfs_name().data(), static_cast<int>(this->vfs_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.OpenSend.vfs_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vfs_name(), output);
  }

  // string f_path = 2;
  if (this->f_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->f_path().data(), static_cast<int>(this->f_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.OpenSend.f_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_path(), output);
  }

  // bytes file_infor = 3;
  if (this->file_infor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->file_infor(), output);
  }

  // int32 in_flags = 4;
  if (this->in_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->in_flags(), output);
  }

  // int32 out_flags = 5;
  if (this->out_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->out_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.OpenSend)
}

::google::protobuf::uint8* OpenSend::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.OpenSend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vfs_name = 1;
  if (this->vfs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vfs_name().data(), static_cast<int>(this->vfs_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.OpenSend.vfs_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vfs_name(), target);
  }

  // string f_path = 2;
  if (this->f_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->f_path().data(), static_cast<int>(this->f_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.OpenSend.f_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_path(), target);
  }

  // bytes file_infor = 3;
  if (this->file_infor().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->file_infor(), target);
  }

  // int32 in_flags = 4;
  if (this->in_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->in_flags(), target);
  }

  // int32 out_flags = 5;
  if (this->out_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->out_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.OpenSend)
  return target;
}

size_t OpenSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.OpenSend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vfs_name = 1;
  if (this->vfs_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vfs_name());
  }

  // string f_path = 2;
  if (this->f_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->f_path());
  }

  // bytes file_infor = 3;
  if (this->file_infor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_infor());
  }

  // int32 in_flags = 4;
  if (this->in_flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->in_flags());
  }

  // int32 out_flags = 5;
  if (this->out_flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->out_flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.OpenSend)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSend* source =
      ::google::protobuf::DynamicCastToGenerated<OpenSend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.OpenSend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.OpenSend)
    MergeFrom(*source);
  }
}

void OpenSend::MergeFrom(const OpenSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.OpenSend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vfs_name().size() > 0) {

    vfs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vfs_name_);
  }
  if (from.f_path().size() > 0) {

    f_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.f_path_);
  }
  if (from.file_infor().size() > 0) {

    file_infor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_infor_);
  }
  if (from.in_flags() != 0) {
    set_in_flags(from.in_flags());
  }
  if (from.out_flags() != 0) {
    set_out_flags(from.out_flags());
  }
}

void OpenSend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.OpenSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSend::CopyFrom(const OpenSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.OpenSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSend::IsInitialized() const {
  return true;
}

void OpenSend::Swap(OpenSend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSend::InternalSwap(OpenSend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vfs_name_.Swap(&other->vfs_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f_path_.Swap(&other->f_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_infor_.Swap(&other->file_infor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(in_flags_, other->in_flags_);
  swap(out_flags_, other->out_flags_);
}

::google::protobuf::Metadata OpenSend::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_2eproto);
  return ::file_level_metadata_test_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OpenReply::InitAsDefaultInstance() {
}
class OpenReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenReply::kRcFieldNumber;
const int OpenReply::kFileInforReplyFieldNumber;
const int OpenReply::kOutFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenReply::OpenReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.OpenReply)
}
OpenReply::OpenReply(const OpenReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_infor_reply_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_infor_reply().size() > 0) {
    file_infor_reply_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_infor_reply_);
  }
  ::memcpy(&out_flags_, &from.out_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&rc_) -
    reinterpret_cast<char*>(&out_flags_)) + sizeof(rc_));
  // @@protoc_insertion_point(copy_constructor:test.OpenReply)
}

void OpenReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OpenReply_test_2eproto.base);
  file_infor_reply_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&out_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_) -
      reinterpret_cast<char*>(&out_flags_)) + sizeof(rc_));
}

OpenReply::~OpenReply() {
  // @@protoc_insertion_point(destructor:test.OpenReply)
  SharedDtor();
}

void OpenReply::SharedDtor() {
  file_infor_reply_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpenReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenReply& OpenReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OpenReply_test_2eproto.base);
  return *internal_default_instance();
}


void OpenReply::Clear() {
// @@protoc_insertion_point(message_clear_start:test.OpenReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_infor_reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&out_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_) -
      reinterpret_cast<char*>(&out_flags_)) + sizeof(rc_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OpenReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OpenReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 out_flags = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_out_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 rc = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_rc(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes file_infor_reply = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_file_infor_reply();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OpenReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.OpenReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 out_flags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes file_infor_reply = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_infor_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.OpenReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.OpenReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OpenReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.OpenReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 out_flags = 5;
  if (this->out_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->out_flags(), output);
  }

  // int32 rc = 6;
  if (this->rc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rc(), output);
  }

  // bytes file_infor_reply = 7;
  if (this->file_infor_reply().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->file_infor_reply(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.OpenReply)
}

::google::protobuf::uint8* OpenReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.OpenReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 out_flags = 5;
  if (this->out_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->out_flags(), target);
  }

  // int32 rc = 6;
  if (this->rc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rc(), target);
  }

  // bytes file_infor_reply = 7;
  if (this->file_infor_reply().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->file_infor_reply(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.OpenReply)
  return target;
}

size_t OpenReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.OpenReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes file_infor_reply = 7;
  if (this->file_infor_reply().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_infor_reply());
  }

  // int32 out_flags = 5;
  if (this->out_flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->out_flags());
  }

  // int32 rc = 6;
  if (this->rc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.OpenReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenReply* source =
      ::google::protobuf::DynamicCastToGenerated<OpenReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.OpenReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.OpenReply)
    MergeFrom(*source);
  }
}

void OpenReply::MergeFrom(const OpenReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.OpenReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_infor_reply().size() > 0) {

    file_infor_reply_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_infor_reply_);
  }
  if (from.out_flags() != 0) {
    set_out_flags(from.out_flags());
  }
  if (from.rc() != 0) {
    set_rc(from.rc());
  }
}

void OpenReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.OpenReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenReply::CopyFrom(const OpenReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.OpenReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenReply::IsInitialized() const {
  return true;
}

void OpenReply::Swap(OpenReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenReply::InternalSwap(OpenReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_infor_reply_.Swap(&other->file_infor_reply_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(out_flags_, other->out_flags_);
  swap(rc_, other->rc_);
}

::google::protobuf::Metadata OpenReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_2eproto);
  return ::file_level_metadata_test_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace test
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::test::OpenSend* Arena::CreateMaybeMessage< ::test::OpenSend >(Arena* arena) {
  return Arena::CreateInternal< ::test::OpenSend >(arena);
}
template<> PROTOBUF_NOINLINE ::test::OpenReply* Arena::CreateMaybeMessage< ::test::OpenReply >(Arena* arena) {
  return Arena::CreateInternal< ::test::OpenReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
