// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: os_remote.proto

#include "os_remote.pb.h"
#include "os_remote.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace os_remote {

static const char* OSRemote_method_names[] = {
  "/os_remote.OSRemote/Init",
  "/os_remote.OSRemote/Open",
  "/os_remote.OSRemote/Delete",
  "/os_remote.OSRemote/Access",
  "/os_remote.OSRemote/FullPathname",
  "/os_remote.OSRemote/Randomness",
  "/os_remote.OSRemote/Sleep",
  "/os_remote.OSRemote/CurrentTime",
  "/os_remote.OSRemote/GetLastError",
  "/os_remote.OSRemote/CurrentTimeInt64",
  "/os_remote.OSRemote/Write",
  "/os_remote.OSRemote/Read",
  "/os_remote.OSRemote/Truncate",
  "/os_remote.OSRemote/Sync",
  "/os_remote.OSRemote/FileSize",
  "/os_remote.OSRemote/FileControl",
  "/os_remote.OSRemote/SectorSize",
  "/os_remote.OSRemote/DeviceCharacteristics",
  "/os_remote.OSRemote/Close",
  "/os_remote.OSRemote/Lock",
  "/os_remote.OSRemote/Unlock",
  "/os_remote.OSRemote/CheckReservedLock",
  "/os_remote.OSRemote/Fetch",
  "/os_remote.OSRemote/Unfetch",
};

std::unique_ptr< OSRemote::Stub> OSRemote::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OSRemote::Stub> stub(new OSRemote::Stub(channel));
  return stub;
}

OSRemote::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Init_(OSRemote_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Open_(OSRemote_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(OSRemote_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Access_(OSRemote_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FullPathname_(OSRemote_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Randomness_(OSRemote_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Sleep_(OSRemote_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurrentTime_(OSRemote_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLastError_(OSRemote_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurrentTimeInt64_(OSRemote_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Write_(OSRemote_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Read_(OSRemote_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Truncate_(OSRemote_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Sync_(OSRemote_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FileSize_(OSRemote_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FileControl_(OSRemote_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SectorSize_(OSRemote_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeviceCharacteristics_(OSRemote_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Close_(OSRemote_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Lock_(OSRemote_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unlock_(OSRemote_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckReservedLock_(OSRemote_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Fetch_(OSRemote_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unfetch_(OSRemote_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OSRemote::Stub::Init(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Init_, context, request, response);
}

void OSRemote::Stub::experimental_async::Init(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Init(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Init(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Init(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Init_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Init_, context, request, false);
}

::grpc::Status OSRemote::Stub::Open(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Open_, context, request, response);
}

void OSRemote::Stub::experimental_async::Open(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Open(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncOpenRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Open_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Open_, context, request, false);
}

::grpc::Status OSRemote::Stub::Delete(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void OSRemote::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::Status OSRemote::Stub::Access(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Access_, context, request, response);
}

void OSRemote::Stub::experimental_async::Access(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Access_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Access(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Access_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Access(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Access_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Access(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Access_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncAccessRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Access_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncAccessRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Access_, context, request, false);
}

::grpc::Status OSRemote::Stub::FullPathname(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FullPathname_, context, request, response);
}

void OSRemote::Stub::experimental_async::FullPathname(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FullPathname_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::FullPathname(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FullPathname_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::FullPathname(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FullPathname_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::FullPathname(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FullPathname_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncFullPathnameRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_FullPathname_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncFullPathnameRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_FullPathname_, context, request, false);
}

::grpc::Status OSRemote::Stub::Randomness(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Randomness_, context, request, response);
}

void OSRemote::Stub::experimental_async::Randomness(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Randomness_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Randomness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Randomness_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Randomness(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Randomness_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Randomness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Randomness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncRandomnessRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Randomness_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncRandomnessRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Randomness_, context, request, false);
}

::grpc::Status OSRemote::Stub::Sleep(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Sleep_, context, request, response);
}

void OSRemote::Stub::experimental_async::Sleep(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Sleep_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Sleep(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Sleep_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Sleep(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Sleep_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Sleep(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Sleep_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncSleepRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Sleep_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncSleepRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Sleep_, context, request, false);
}

::grpc::Status OSRemote::Stub::CurrentTime(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CurrentTime_, context, request, response);
}

void OSRemote::Stub::experimental_async::CurrentTime(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CurrentTime_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::CurrentTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CurrentTime_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::CurrentTime(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CurrentTime_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::CurrentTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CurrentTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncCurrentTimeRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_CurrentTime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncCurrentTimeRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_CurrentTime_, context, request, false);
}

::grpc::Status OSRemote::Stub::GetLastError(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLastError_, context, request, response);
}

void OSRemote::Stub::experimental_async::GetLastError(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLastError_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::GetLastError(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLastError_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::GetLastError(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLastError_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::GetLastError(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLastError_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncGetLastErrorRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_GetLastError_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncGetLastErrorRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_GetLastError_, context, request, false);
}

::grpc::Status OSRemote::Stub::CurrentTimeInt64(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CurrentTimeInt64_, context, request, response);
}

void OSRemote::Stub::experimental_async::CurrentTimeInt64(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CurrentTimeInt64_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::CurrentTimeInt64(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CurrentTimeInt64_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::CurrentTimeInt64(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CurrentTimeInt64_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::CurrentTimeInt64(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CurrentTimeInt64_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncCurrentTimeInt64Raw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_CurrentTimeInt64_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncCurrentTimeInt64Raw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_CurrentTimeInt64_, context, request, false);
}

::grpc::Status OSRemote::Stub::Write(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Write_, context, request, response);
}

void OSRemote::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncWriteRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Write_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Write_, context, request, false);
}

::grpc::Status OSRemote::Stub::Read(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Read_, context, request, response);
}

void OSRemote::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncReadRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, false);
}

::grpc::Status OSRemote::Stub::Truncate(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Truncate_, context, request, response);
}

void OSRemote::Stub::experimental_async::Truncate(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Truncate_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Truncate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Truncate_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Truncate(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Truncate_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Truncate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Truncate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncTruncateRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Truncate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncTruncateRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Truncate_, context, request, false);
}

::grpc::Status OSRemote::Stub::Sync(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Sync_, context, request, response);
}

void OSRemote::Stub::experimental_async::Sync(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Sync_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Sync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Sync_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Sync(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Sync_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Sync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Sync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncSyncRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Sync_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Sync_, context, request, false);
}

::grpc::Status OSRemote::Stub::FileSize(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FileSize_, context, request, response);
}

void OSRemote::Stub::experimental_async::FileSize(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FileSize_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::FileSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FileSize_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::FileSize(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FileSize_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::FileSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FileSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncFileSizeRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_FileSize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncFileSizeRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_FileSize_, context, request, false);
}

::grpc::Status OSRemote::Stub::FileControl(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FileControl_, context, request, response);
}

void OSRemote::Stub::experimental_async::FileControl(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FileControl_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::FileControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FileControl_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::FileControl(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FileControl_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::FileControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FileControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncFileControlRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_FileControl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncFileControlRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_FileControl_, context, request, false);
}

::grpc::Status OSRemote::Stub::SectorSize(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SectorSize_, context, request, response);
}

void OSRemote::Stub::experimental_async::SectorSize(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SectorSize_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::SectorSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SectorSize_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::SectorSize(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SectorSize_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::SectorSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SectorSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncSectorSizeRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_SectorSize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncSectorSizeRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_SectorSize_, context, request, false);
}

::grpc::Status OSRemote::Stub::DeviceCharacteristics(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeviceCharacteristics_, context, request, response);
}

void OSRemote::Stub::experimental_async::DeviceCharacteristics(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeviceCharacteristics_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::DeviceCharacteristics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeviceCharacteristics_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::DeviceCharacteristics(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeviceCharacteristics_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::DeviceCharacteristics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeviceCharacteristics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncDeviceCharacteristicsRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_DeviceCharacteristics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncDeviceCharacteristicsRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_DeviceCharacteristics_, context, request, false);
}

::grpc::Status OSRemote::Stub::Close(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Close_, context, request, response);
}

void OSRemote::Stub::experimental_async::Close(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Close(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncCloseRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Close_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Close_, context, request, false);
}

::grpc::Status OSRemote::Stub::Lock(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Lock_, context, request, response);
}

void OSRemote::Stub::experimental_async::Lock(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Lock_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Lock_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Lock(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Lock_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Lock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncLockRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Lock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncLockRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Lock_, context, request, false);
}

::grpc::Status OSRemote::Stub::Unlock(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Unlock_, context, request, response);
}

void OSRemote::Stub::experimental_async::Unlock(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Unlock_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Unlock_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Unlock(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Unlock_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Unlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncUnlockRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Unlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncUnlockRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Unlock_, context, request, false);
}

::grpc::Status OSRemote::Stub::CheckReservedLock(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckReservedLock_, context, request, response);
}

void OSRemote::Stub::experimental_async::CheckReservedLock(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckReservedLock_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::CheckReservedLock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckReservedLock_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::CheckReservedLock(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckReservedLock_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::CheckReservedLock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckReservedLock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncCheckReservedLockRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_CheckReservedLock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncCheckReservedLockRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_CheckReservedLock_, context, request, false);
}

::grpc::Status OSRemote::Stub::Fetch(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Fetch_, context, request, response);
}

void OSRemote::Stub::experimental_async::Fetch(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Fetch_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Fetch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Fetch_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Fetch(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Fetch_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Fetch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Fetch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncFetchRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Fetch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncFetchRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Fetch_, context, request, false);
}

::grpc::Status OSRemote::Stub::Unfetch(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::os_remote::ArgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Unfetch_, context, request, response);
}

void OSRemote::Stub::experimental_async::Unfetch(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Unfetch_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Unfetch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Unfetch_, context, request, response, std::move(f));
}

void OSRemote::Stub::experimental_async::Unfetch(::grpc::ClientContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Unfetch_, context, request, response, reactor);
}

void OSRemote::Stub::experimental_async::Unfetch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::os_remote::ArgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Unfetch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::AsyncUnfetchRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Unfetch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::os_remote::ArgReply>* OSRemote::Stub::PrepareAsyncUnfetchRaw(::grpc::ClientContext* context, const ::os_remote::ArgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::os_remote::ArgReply>::Create(channel_.get(), cq, rpcmethod_Unfetch_, context, request, false);
}

OSRemote::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Init), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Open), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Delete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Access), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::FullPathname), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Randomness), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Sleep), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::CurrentTime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::GetLastError), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::CurrentTimeInt64), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Write), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Read), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Truncate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Sync), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::FileSize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::FileControl), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::SectorSize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::DeviceCharacteristics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Close), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Lock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Unlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::CheckReservedLock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Fetch), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRemote_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRemote::Service, ::os_remote::ArgRequest, ::os_remote::ArgReply>(
          std::mem_fn(&OSRemote::Service::Unfetch), this)));
}

OSRemote::Service::~Service() {
}

::grpc::Status OSRemote::Service::Init(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::Open(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::Delete(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::Access(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::FullPathname(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::Randomness(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::Sleep(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::CurrentTime(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::GetLastError(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::CurrentTimeInt64(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::Write(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::Read(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::Truncate(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::Sync(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::FileSize(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::FileControl(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::SectorSize(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::DeviceCharacteristics(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::Close(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::Lock(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::Unlock(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::CheckReservedLock(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::Fetch(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRemote::Service::Unfetch(::grpc::ServerContext* context, const ::os_remote::ArgRequest* request, ::os_remote::ArgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace os_remote

